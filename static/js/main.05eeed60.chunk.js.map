{"version":3,"sources":["logo.svg","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","TableBody","props","data","rows","map","entry","i","dailyRate","sum","toFixed","averageRate","Math","pow","avgRate5","date","Table","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6tBAAAA,EAAOC,QAAU,IAA0B,kC,mJCErCC,EAAc,WAChB,OACI,+BACI,4BACI,8DACA,6FACA,0GACA,gHACA,oLAMVC,EAAY,SAAAC,GAAU,IACjBC,EAAQD,EAARC,KAEDC,EAAOD,EAAKE,KAAI,SAACC,EAAOC,GAC1B,IAAIC,EAAkB,GAALD,GAAWD,EAAMG,IAAMN,EAAKI,EAAE,GAAGE,KAAKC,QAAQ,GAAK,GAChEC,EAAoB,GAALJ,EAASK,KAAKC,IAAIP,EAAMG,IAAIN,EAAK,GAAGM,IAAM,GAAGF,EAAE,IAAKG,QAAQ,GAAK,GAChFI,EAAYP,GAAK,EAAIK,KAAKC,IAAIP,EAAMG,IAAIN,EAAKI,EAAE,GAAGE,IAAM,IAAMC,QAAQ,GAAK,GAC/E,OACI,4BACI,4BAAKJ,EAAMS,MACX,4BAAKT,EAAMG,KACX,4BAAKD,GACL,4BAAKG,GACL,4BAAKG,GACL,iCAIZ,OAAO,+BAAQV,IAgBJY,E,uKAZD,IACCb,EAAQc,KAAKf,MAAbC,KAEP,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWA,KAAMA,S,GAPbe,IAAMC,WCzBXC,E,uKAJT,OAAO,kBAAC,EAAD,CAAOjB,KAAMA,Q,GAFRe,IAAMC,WCMJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05eeed60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>תאריך</th>\r\n                <th>מספר נדבקים</th>\r\n                <th>קצב הדבקה יומי</th>\r\n                <th>ממוצע קצב הדבקה</th>\r\n                <th>ממוצע קצב הדבקה ל-5 ימים אחורה</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst TableBody = props => {\r\n    const {data} = props\r\n    \r\n    const rows = data.map((entry, i) => {\r\n        var dailyRate = (i != 0 ?  (entry.sum / data[i-1].sum).toFixed(2) : \"\")\r\n        var averageRate = (i != 0 ? Math.pow(entry.sum/data[0].sum, (1/(i+1))).toFixed(2) : \"\" )\r\n        var avgRate5 = (i >= 4 ? Math.pow(entry.sum/data[i-4].sum, (1/5)).toFixed(2) : \"\" )\r\n        return (\r\n            <tr>\r\n                <td>{entry.date}</td>\r\n                <td>{entry.sum}</td>\r\n                <td>{dailyRate}</td>\r\n                <td>{averageRate}</td>\r\n                <td>{avgRate5}</td>\r\n                <td></td>\r\n            </tr>\r\n        )\r\n    })\r\n    return <tbody>{rows}</tbody>\r\n}\r\n\r\nclass Table extends React.Component {\r\n    render() {\r\n        const {data} = this.props\r\n\r\n        return (\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody data={data} />\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport data from \"./corona_israel.json\"\nimport Table from \"./Table\"\n\nclass App extends React.Component {\n    render() {\n      return <Table data={data} />\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}